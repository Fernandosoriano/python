
import requests
# from requests.auth import HTTPDigestAuth
# from requests_toolbelt.multipart.encoder import MultipartEncoder
base64_par = ''

def incorporar_doc_timbrado_a_exped(id_persona, id_plantilla, base64, file_name, created_by):
     try:
         params = {
             'key': 'AIzaSyAiuUeOLROFwZDVPRZlWcxBI8fcEo0_hcg'
         }
         service_url = f'https://ent-dev-endpoints.gc.gentera.com.mx/content-manager/client/{id_persona}/folders/documents?key=AIzaSyAiuUeOLROFwZDVPRZlWcxBI8fcEo0_hcg'
         print("URL_incorporar_doc_timbrado_a_expediente:")
         print(service_url)    
         data = {
           "subfolders" : "/yastas/comisionistas/", #DUDA. siempre debe ir así? y esto es el param proceso_venta? según el spd, pareciera que sí
           "typeId": id_plantilla,
           "metadata" : {"Info":"Test pdf"},  # DUDA, siempre va  así??
           "base64" : base64,
           "filename": file_name,
           "createdBy" : created_by
         }
         print ('BODY_incorporar_doc_timbrado_a_expediente:')
         print(data)
         headers = {'Content-Type': 'application/json'}
         r = requests.put(str(service_url),
                         json=data,
                          headers=headers,
                          params=params)
         if r.status_code == 500:
             respuesta = r
         else:
             respuesta = r.json()
         print("RESPONSE_incorporar_doc_timbrado_a_expediente:")
         print(respuesta)
         return respuesta, r.status_code
        #  print('Actualizar status_code registrar:', r.status_code)
        #  respuesta = r.json()
        #  print("Respuesta: ")
        #  print(respuesta)
        #  return respuesta, r.status_code
     except Exception as e:
         print(e)
         return e
     
incorporar_doc_timbrado_a_exped(43215,'CFDI-DOC-TWO-2',base64_par,'test.pdf','Franco')
